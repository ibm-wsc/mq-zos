{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"comparingoffloading/","title":"Lab Exercise: Comparing SMDS and DB2 Blobs for queue-sharing","text":""},{"location":"comparingoffloading/#audience-level-knowledge-of-mq-or-zos","title":"Audience level: knowledge of MQ or z/OS","text":""},{"location":"comparingoffloading/#skillset-zos-systems-programming-mq-administration","title":"Skillset: z/OS Systems Programming, MQ Administration","text":""},{"location":"comparingoffloading/#background","title":"Background:","text":"<p>Shared message data sets (SMDS) are the preferred method for offloading large messages in queue-sharing groups. SMDS\u2019s are designed to handle large messages efficiently, so in this exercise, we will test two CF structures, one with SMDS and the other with BLOBs to examine the differences between the two offloading mechanisms.</p>"},{"location":"comparingoffloading/#overview-of-exercise","title":"Overview of exercise:","text":"<p>I.  Run OEMPUT program against SMDS-enabled CF structure (TEST1)</p> <p>II. Run OEMPUT program against BLOB-enabled CF structure (TEST2)</p> <p>III.    Compare the output from both</p>"},{"location":"comparingoffloading/#steps-of-exercise","title":"Steps of exercise:","text":""},{"location":"comparingoffloading/#i-run-oemput-program-against-smds-enabled-cf-structure-test1","title":"I. Run OEMPUT program against SMDS-enabled CF structure (TEST1)","text":"<ol> <li> <p>Using MQ Explorer, verify that the below configuration is in place. You should see connections to ZQS1, ZQS2, and you should see a QSGA queue-sharing group visible.</p> </li> <li> <p>In MQ Explorer, navigate to the queue-sharing group QSGA\u2019s Coupling Facility Structures by clicking  \u2018&gt;\u2019 next to the QSGA label then pressing Coupling Facility Structures to display more information.</p> </li> <li> <p>Your structures should look like the following:     </p> </li> <li> <p>Scroll to the right, making sure that all offload rules are the same for TEST1 and TEST2 except for the \u2018Offload\u2019 and \u2018Group data set name\u2019 fields.</p> <p></p> </li> <li> <p>Now, navigate to the MQS1 z/OS image.</p> </li> <li> <p>Use option 3.4 to navigate to the ZQS1.MQ.JCL data set. Navigate to PUTSMDS and type an \u2018e\u2019 to edit the member.</p> <p></p> </li> <li> <p>In PUTSMDS, you will see an execution of OEMPUT. This JCL puts a large amount of large messages on our SMDS.QUEUE, defined to TEST1. Which parameters are we using with OEMPUT here?</p> </li> </ol> Parameter Description - mZQS1 Specify target queue manager -qSMDS.QUEUE Specify target queue -fileDD:MSGIN Specify messages to be used -ts500 Specify how long message stream should last (500 seconds) -s650000 Specify the size of the message, note we are using a message larger than 63KB here, as to necessitate the use of offloading, since large messages can\u2019t be held in the CF list structures. -l10 Loop MQPUT and MQGET 10 times during execution -cgcpc Mimic client application program by procressing a commit after both MQPUTs and MQGETs -crlf Each line in the input message file is used in sequence as message data -rSMDS.QUEUE Reply-to-queue from which replies will be retrieved (MQGET). If the -r option is omitted, MQGETs will not be issued. <p>**Note: If we specified persistent messages here, the contrast between SMDS and BLOBs would be less noticeable because transactions on both sides would have to wait on logging.</p> <ol> <li>Type \u2018submit\u2019 in the command line and press your enter key. You should see a reason code (RC) of 0000. This execution will take a few minutes to complete.</li> </ol>"},{"location":"comparingoffloading/#ii-run-oemput-program-against-blob-enabled-cf-structure-test2","title":"II. Run OEMPUT program against BLOB-enabled CF structure (TEST2)","text":"<ol> <li> <p>Now, we will repeat the steps to submit another execution of OEMPUT, this time for our queue tied to BLOB storage. </p> </li> <li> <p>Use F3 to back out to the ZQS1.MQ.JCL data set. Place an \u2018E\u2019 next to PUTBLOB and press enter to edit the member. </p> </li> <li> <p>As you look through PUTBLOB, navigating up and down the screen using the F7 and F8 keys, you will notice that the only difference between PUTSMDS and PUTBLOB is the queue name. We are keep all other variables constant, especially message size.</p> </li> <li> <p>Type \u2018submit\u2019 in the command line and press your enter key. You should see a reason code (RC) of 0000. This execution will take a few minutes to complete. </p> </li> </ol>"},{"location":"comparingoffloading/#iii-compare-the-output-from-both","title":"III. Compare the output from both","text":"<ol> <li> <p>From the ISPF main menu, type \u2018sdsf\u2019 or \u2018d\u2019 on the command line and press enter to access the SDSF menu. </p> </li> <li> <p>Here, type \u2018ST\u2019 on the command line and press enter to access the status of recent jobs.</p> </li> <li> <p>In our JCL, our OEMPUT jobs were named OEMPSMDS and OEMBLOB, respectively. We can search for all jobs beginning with OEM, but typing in the command line \u2018pre OEM*\u2019 and pressing enter.</p> </li> <li> <p>Both jobs should appear in a list. Let\u2019s look at OEMPSMDS first. Place a question mark to the left of the job name and press enter. </p> </li> <li> <p>A list should appear with output on how successful the job was and any output from the job. We are interested in the SYSPRINT output. Place a \u2018s\u2019 to the left of SYSPRINT and press enter.</p> </li> <li> <p>Scroll down on the SYSPRINT output until you see the following output. Make not of the Total Transaction value, the Transaction Rate value, and the Avg App CPU per msg value. This gives us information about how many transactions were completed in the allotted time with SMDS storage specified, the efficiency of those transactions, and the CPU consumption required.</p> </li> </ol> <p>If you are unable to see the SYSPRINT screen for any reason, we have prepared sample examples at the end of this lab for reference.</p> <ol> <li> <p>Now, let\u2019s check out the same information for BLOB storage. Use F3 to back out twice until you reach the list containing OEMPSMDS and OEMPBLOB.</p> </li> <li> <p>Place a \u2018?\u2019 next to the OEMPBLOB job and press enter.</p> </li> <li> <p>Place a \u2018s\u2019 next to the SYSPRINT output and press enter.</p> </li> <li> <p>Navigate until you see the Total Transaction value, the Transaction Rate value, and the Avg App CPU per msg value.</p> </li> </ol> <p>If you are unable to see the SYSPRINT screen for any reason, we have prepared sample examples at the end of this lab for reference.</p> <ol> <li>You have now compared the performance and storage consumption of SMDS and BLOB offloading in our test environment! Hopefully, this helps you see the advantages of using SMDS in terms of throughput. While CPU consumption is higher for SMDS in this test environment, </li> </ol> <p>Figure 1. SMDS performance</p> <p></p> <p>Figure 2 BLOB performance</p> <p></p>"},{"location":"streamingqueues/","title":"Creating Streaming queues w/ IBM MQ for z/OS","text":"<p>Audience level: Some knowledge of MQ or z/OS  Skillset:  MQ Administration</p>"},{"location":"streamingqueues/#background-this-lab-introduces-using-streaming-queues-to-ibm-mq-for-zos-streaming-queues-was-released-in-the-ibm-mq-product-in-release-version-923-the-function-enables-you-to-send-near-duplicate-messages-to-a-secondary-queue-called-the-streaming-queue","title":"Background: This lab introduces using streaming queues to IBM MQ for z/OS. Streaming queues was released in the IBM MQ product in release version 9.2.3. The function enables you to send near-duplicate messages to a secondary queue, called the streaming queue.","text":""},{"location":"streamingqueues/#overview-of-the-exercise","title":"Overview of the exercise:","text":""},{"location":"streamingqueues/#lab-begin","title":"Lab Begin:","text":"<p>1)  If not already started, start the MQ Explorer by double clicking on the icon on the image.</p> <p>2)  The explorer should start and show that it is at MQ Version 9.3 as shown:  </p> <p>3)  When the explorer has started, there may be a selection of queue managers available.  We are interested in connections to queue managers on our z/OS environment. If you do not see connections to a queue manager you have been working with, you can create a connection by right clicking \u2018Queue Managers\u2019 and selecting to \u2018Add Remote Queue Manager\u2026\u2019. You will then fill out all the necessary details for IP address and port number.  </p> <p>4)  Right click on ZQS1 and select connect.  Please note that the IP address may be different from what is shown here.  </p> <p>The description and command level show that this is a 9.4 queue manager on z/OS.  </p> <p>5)  Expand the ZQS1 queue manager \u2013 click on the \u2018&gt;\u2019 beside the name to see the resources defined to this queue manager.  \u2003 6)  Click on the \u2018Queues\u2019 to see the queues that are currently defined.  Please note that the list may differ from what is shown here.   For example, you may see the SYSTEM queues or temporary dynamic queues that are currently in use. </p> <p>7)  Right click on the Queues under the ZQS1 queue manager and select New-&gt; Local Queue</p> <p>8)  The New Local Queue dialog box should appear, and you will type in the queue name for the streaming target queue.  It should be TEAMXX.STREAM.COPY, replacing the TEAMXX with the TEAM number you have been assigned (it will be TEAM01-TEAM32). After entering the queue name, please click on the \u2018Next\u2019 button.</p> <p>9)  On the Change Properties dialog box Please select the \u2018Extended\u2019 option and change the \u2018Sharability\u2019 to \u2018Sharable\u2019 and the \u2018Default input open option\u2019 to \u2018Input Shared as shown and click on the Finish Button.</p> <p>10) The object should be successfully created, and the following dialog box should appear.  If you would like to check the \u2018do not show success messages in future\u2019 please feel free.  Please then click the OK button to clear the success display. </p> <p>11) You will now define the base queue for streaming.  Right click on the queues tab again and select \u2018New\u2019 -&gt; \u2018Local Queue\u2019 to define the streaming base queue.  It\u2019s name will be TEAMXX.STREAM.BASE, replacing the TEAMXX with your team number (TEAM01 thru TEAM32) . </p> <p>12) Click on the Next Button.  There are both Extended and Storage tab changes that will be made. 13) On the \u2018Extended\u2019 tab please change the Sharability and Default Open input option to \u2018Sharable\u2019 and \u2018Input Shared\u2019 as you did for the first queue.  \u2003 14) For those of you familiar with the Storage tab on this dialoge box, there have been some changes.  The streaming queue name and quality of service are set here.  </p> <p>15) The queue name may be selected from the previously defined queues by using the \u2018Select\u2019  Button and choosing the name from the dialog box.  Please select the streaming target queue defined above, you may have to scroll down to find it, and click on \u2018OK\u2019.</p> <p>16) The queue name should now be populated in the dialog box.  Please then select \u2018Must duplicate\u2019 for the first test and click on Finish.</p> <p>17) To test, we are just going to put messages to the base queue.  From the queue list right click on the TEAMXX.STREAM.BASE queue (replacing TEAMXX with your team number) and select \u2018Put Test message\u2019.  In the dialog box, please enter a test message and click on the \u2018OK\u2019 button</p> <p>18) Please put two more messages onto the queue, varying the contents a bit.  \u2018Test 1, Test2, Test 3\u2019 is just fine.  Click on the \u2018Close\u2019 button to return to the queue list. 19) Click on the refresh key, in the upper right side of the queue list box to refresh the list of queues. </p> <p>20) You should now see that both the base and copy queues have an equal number of messages. </p> <p>21) At this point you can browse the queues.  Note that the message contents are the same as are the Message IDs on both queues.  </p> <p>BASE:</p> <p>COPY:</p> <p>BASE:</p> <p>COPY:</p> <p>BASE:</p> <p>COPY:</p> <p>22) Testing an Exception \u2013 put inhibit the COPY queue.  From the list of queues, Right click on the TEAMXX.STREAM.COPY (USE YOUR TEAM NUMBER IN PLACE OF TEAMXX) queue and select Properties.  Select \u2018Inhibited\u2019 for put messages, and click on OK.</p> <p>23) Attempt to put a message on the TEAMXX.BASE.QUEUE, replacing the TEAMXX with your team ID.  </p> <p>24) You should receive a message that you cannot put a message to this queue.</p> <p>25) Clicking on the \u2018Details\u2019 shows the reason:</p> <p>26) Going back to the BASE queue, change the Streaming Quality of service from \u2018Must Duplicate\u2019 to \u2018Best effort\u2019 and click the OK button.  </p> <p>27) Try to put another message to the BASE queue, like what is shown. </p> <p>28) That should work, and the depths of the base and copy queues should now be different: </p> <p>29) Congratulations!  You have now been able to create and use a streaming, private queue. 30) Now, we will use the queue-sharing group defined on the environment called QSGA to create a streaming, shared queue.  31) On MQ explorer, under Queue-sharing groups, you should see QSGA defined. Click the drop-down to see a list of Shared Queues. 32) Unlike private queues, we will need to check which shared storage we should specify for our shared queues. Look under \u2018Coupling Facility Structures\u2019</p> <p>33) We will go ahead and remember TEST1 for our storage needs. Now, create a new shared queue. 34) We will start with defining our streaming queue like so. 35) Under the Storage settings, we must specify our Coupling facility structure name of choice. This is where we will put in TEST1. That is the only additional setting you will need to make for the streaming queue. Press finish.</p> <p>36) Now, we will define our base queue following the same process of creating a shared queue. Here, however, we will specify a streaming queue to point to like so. 37) Now, we have defined two shared queues. You should see both in the shared queues list under QSGA. 38) Let\u2019s test them out! Right click the base queue and put a test message on the base queue.  39) Once put, you should see the message duplicated on the streaming queue.  40) When you navigate to the individual queue managers\u2019 queues, you should see both the shared queues and their messages available to both ZQS1 and ZQS2</p> <p>LAB FINISHED!</p>"}]}